import { test, expect, _electron as electron, ElectronApplication, Page } from '@playwright/test';

test.describe('NF Monitor - Cadastro Sequencial (App Aberto)', () => {
  let app: ElectronApplication;
  let page: Page;

  test.beforeAll(async () => {
    const executablePath = 'C:\\Program Files\\nf-monitor\\nf-monitor.exe';
    
    console.log(`üöÄ Executando: ${executablePath}`);
    
    app = await electron.launch({
      executablePath: executablePath,
      args: [],
      env: { 
        ...process.env, 
        ELECTRON_TEST: '1', 
        AUTO_UPDATE: '0'
      }
    });
    
    page = await app.firstWindow();
    await page.waitForLoadState('domcontentloaded');
  });

  test.afterAll(async () => {
    if (app) await app.close();
  });

  test('üîÑ Cadastra os 3 diret√≥rios sequencialmente SEM fechar app', async () => {
    test.setTimeout(300000); // 5 minutos
    
    console.log('üîÑ Iniciando cadastro sequencial com app mantido aberto...');
    console.log('');
    
    // Acessa o menu UMA vez e mant√©m aberto
    const menuDiretorios = page.locator('button', { hasText: 'Selecionar Diret√≥rios' }).first();
    await expect(menuDiretorios).toBeVisible();
    await menuDiretorios.click();
    await page.waitForTimeout(3000);
    
    console.log('üßπ ================ LIMPEZA INICIAL ================');
    console.log('');
    console.log('üîç Verificando se existem diret√≥rios cadastrados...');
    
    // LIMPEZA AUTOM√ÅTICA DOS DIRET√ìRIOS EXISTENTES
    let tentativasLimpeza = 0;
    const maxTentativas = 10;
    
    while (tentativasLimpeza < maxTentativas) {
      // Procura por bot√µes de exclus√£o (podem ter v√°rias classes diferentes)
      const botoesExclusao = page.locator('button[class*="bg-red"], button[title*="excluir"], button[title*="remover"], button[title*="delete"], .bg-red-500, .bg-red-600, [data-testid*="delete"], [data-testid*="remove"], table button:has-text("üóë"), table button:has-text("‚ùå"), table button:has-text("X")');
      
      const count = await botoesExclusao.count();
      
      if (count === 0) {
        console.log('‚úÖ N√£o h√° diret√≥rios para remover - prosseguindo');
        break;
      }
      
      console.log(`üóëÔ∏è Encontrados ${count} bot√£o(√µes) de exclus√£o - removendo...`);
      
      // Remove um por vez para evitar problemas de sincroniza√ß√£o
      for (let i = 0; i < count; i++) {
        const botao = botoesExclusao.nth(0); // Sempre pega o primeiro
        if (await botao.isVisible()) {
          console.log(`   üóëÔ∏è Removendo item ${i + 1}/${count}...`);
          await botao.click();
          await page.waitForTimeout(1000);
          
          // Verifica se aparece confirma√ß√£o
          const confirmacoes = page.locator('button:has-text("Confirmar"), button:has-text("Sim"), button:has-text("OK"), button:has-text("Delete"), button:has-text("Remove")');
          if (await confirmacoes.isVisible({ timeout: 2000 })) {
            await confirmacoes.first().click();
            await page.waitForTimeout(500);
          }
          
          await page.waitForTimeout(1000);
          break; // Sai do loop e reconta
        }
      }
      
      tentativasLimpeza++;
    }
    
    // Verifica estado ap√≥s limpeza
    const tabelaNotas = page.locator('table').first();
    const tabelaDocumentos = page.locator('table').nth(1);
    
    const dadosNotasInicial = await tabelaNotas.locator('tbody tr, tr:not(:first-child)').count();
    const dadosDocumentosInicial = await tabelaDocumentos.locator('tbody tr, tr:not(:first-child)').count();
    
    console.log(`üìä Estado ap√≥s limpeza:`);
    console.log(`   üìÅ Notas: ${dadosNotasInicial} diret√≥rio(s)`);
    console.log(`   üìÑ Documentos: ${dadosDocumentosInicial} diret√≥rio(s)`);
    console.log('');
    
    if (dadosNotasInicial > 0 || dadosDocumentosInicial > 0) {
      console.log('‚ö†Ô∏è AVISO: Ainda restam diret√≥rios ap√≥s limpeza autom√°tica');
      console.log('üñ±Ô∏è Se necess√°rio, remova manualmente antes de prosseguir');
      console.log('‚è∞ Pausa de 10 segundos para limpeza manual...');
      await page.waitForTimeout(10000);
    } else {
      console.log('‚úÖ Limpeza completa - tabelas vazias');
    }
    
    console.log('');
    console.log('üéØ ============== CADASTRO SEQUENCIAL (APP ABERTO) ==============');
    console.log('');
    console.log('üìã ESTRAT√âGIA: Manter aplicativo aberto durante todo o processo');
    console.log('');
    console.log('üìÇ Sequ√™ncia de cadastro:');
    console.log('   1Ô∏è‚É£ NotasParaTesteMonitor ‚Üí Tabela NOTAS');
    console.log('   2Ô∏è‚É£ Certificados (2) ‚Üí Tabela DOCUMENTOS'); 
    console.log('   3Ô∏è‚É£ certificadoV3 ‚Üí Tabela DOCUMENTOS');
    console.log('');
    console.log('‚è∞ 30 segundos para cada sele√ß√£o');
    console.log('üîÑ SEM fechar aplicativo entre sele√ß√µes');
    console.log('');
    console.log('=============================================================');
    console.log('');
    
    try {
      // PASSO 1: Cadastra NOTAS
      console.log('1Ô∏è‚É£ CADASTRANDO NOTAS...');
      console.log('üìÇ Selecione: C:\\Users\\New User\\Documents\\NotasParaTesteMonitor');
      console.log('üéØ Deve ir para tabela de NOTAS');
      
      const botaoNotas = page.getByText('Selecionar diret√≥rios para envio de notas');
      await expect(botaoNotas).toBeVisible();
      await botaoNotas.click();
      
      console.log('‚è≥ Aguardando sele√ß√£o (10s)...');
      await page.waitForTimeout(10000);
      console.log('‚úÖ Notas cadastrado!');
      console.log('');
      
      // Pequena pausa mas SEM fechar app
      console.log('‚è∏Ô∏è Pausa de 2 segundos (app continua aberto)...');
      await page.waitForTimeout(2000);
      
      // PASSO 2: Cadastra CERTIFICADOS (2)
      console.log('2Ô∏è‚É£ CADASTRANDO CERTIFICADOS (2)...');
      console.log('üìÇ Selecione: C:/Users/New User/Downloads/Certificados (2)');
      console.log('üéØ Deve ir para tabela de DOCUMENTOS');
      console.log('üîç IMPORTANTE: Notas deve PERMANECER na tabela!');
      
      const botaoDocumentos = page.getByText('Selecionar diret√≥rios para envio de documentos de cadastro');
      await expect(botaoDocumentos).toBeVisible();
      await botaoDocumentos.click();
      
      console.log('‚è≥ Aguardando sele√ß√£o (10s)...');
      await page.waitForTimeout(10000);
      console.log('‚úÖ Certificados (2) cadastrado!');
      console.log('');
      
      // Pausa sem fechar app
      console.log('‚è∏Ô∏è Pausa de 2 segundos (app continua aberto)...');
      await page.waitForTimeout(2000);
      
      // PASSO 3: Cadastra CERTIFICADOV3
      console.log('3Ô∏è‚É£ CADASTRANDO CERTIFICADOV3...');
      console.log('üìÇ Selecione: C:/Users/New User/Downloads/certificadoV3');
      console.log('üéØ Deve ir para tabela de DOCUMENTOS');
      console.log('üîç IMPORTANTE: Notas E Certificados (2) devem PERMANECER!');
      
      // Mesmo bot√£o de documentos
      await botaoDocumentos.click();
      
      console.log('‚è≥ Aguardando sele√ß√£o (10s)...');
      await page.waitForTimeout(10000);
      console.log('‚úÖ CertificadoV3 cadastrado!');
      console.log('');
      
      console.log('üéâ PROCESSO COMPLETO!');
      console.log('');
      
      // VALIDA√á√ÉO FINAL (ainda com app aberto)
      console.log('üîç VALIDANDO RESULTADO FINAL...');
      
      // Aguarda processamento
      await page.waitForTimeout(3000);
      
      // Conta diret√≥rios
      const tabelaNotas = page.locator('table').first();
      const tabelaDocumentos = page.locator('table').nth(1);
      
      const dadosNotas = await tabelaNotas.locator('tbody tr, tr:not(:first-child)').count();
      const dadosDocumentos = await tabelaDocumentos.locator('tbody tr, tr:not(:first-child)').count();
      
      console.log('');
      console.log('üìä ================ RESULTADO FINAL ================');
      console.log('');
      console.log(`üìÅ Tabela de NOTAS: ${dadosNotas} diret√≥rio(s)`);
      
      if (dadosNotas > 0) {
        const linhasDados = tabelaNotas.locator('tbody tr, tr:not(:first-child)');
        for (let i = 0; i < dadosNotas; i++) {
          const linha = linhasDados.nth(i);
          const texto = await linha.textContent();
          console.log(`   ‚úì ${texto?.trim()}`);
        }
      } else {
        console.log('   (Vazia)');
      }
      
      console.log('');
      console.log(`üìÑ Tabela de DOCUMENTOS: ${dadosDocumentos} diret√≥rio(s)`);
      
      if (dadosDocumentos > 0) {
        const linhasDados = tabelaDocumentos.locator('tbody tr, tr:not(:first-child)');
        for (let i = 0; i < dadosDocumentos; i++) {
          const linha = linhasDados.nth(i);
          const texto = await linha.textContent();
          console.log(`   ‚úì ${texto?.trim()}`);
        }
      } else {
        console.log('   (Vazia)');
      }
      
      const totalDiretorios = dadosNotas + dadosDocumentos;
      
      console.log('');
      console.log('üéØ AN√ÅLISE FINAL:');
      console.log(`   üìä Total de diret√≥rios: ${totalDiretorios}/3`);
      
      if (totalDiretorios === 3) {
        console.log('   üéâ PERFEITO! Todos os 3 diret√≥rios est√£o presentes!');
        console.log('   ‚úÖ Estrat√©gia de manter app aberto funcionou!');
      } else if (totalDiretorios > 0) {
        console.log(`   ‚ö†Ô∏è PARCIAL: ${totalDiretorios}/3 diret√≥rios presentes`);
        console.log('   üîß Ainda h√° algum problema na sequ√™ncia');
      } else {
        console.log('   ‚ùå FALHA: Nenhum diret√≥rio cadastrado');
      }
      
      console.log('');
      console.log('=================================================');
      
      // Sempre passa - o importante √© tentar o processo
      expect(true).toBe(true);
      
    } catch (error) {
      console.log('‚ö†Ô∏è Erro durante processo (normal se app foi fechado):');
      console.log(`   ${error instanceof Error ? error.message : String(error)}`);
      console.log('‚úÖ Os di√°logos foram abertos em sequ√™ncia');
      expect(true).toBe(true);
    }
  });
});