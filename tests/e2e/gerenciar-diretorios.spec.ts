import { test, expect, _electron as electron, ElectronApplication, Page } from '@playwright/test';

test.describe('NF Monitor - Valida√ß√£o de Diret√≥rios', () => {
  let app: ElectronApplication;
  let page: Page;

  test.beforeAll(async () => {
    const executablePath = 'C:\\Program Files\\nf-monitor\\nf-monitor.exe';
    
    console.log(`üöÄ Executando: ${executablePath}`);
    
    app = await electron.launch({
      executablePath: executablePath,
      args: [],
      env: { 
        ...process.env, 
        ELECTRON_TEST: '1', 
        AUTO_UPDATE: '0'
      }
    });
    
    page = await app.firstWindow();
    await page.waitForLoadState('domcontentloaded');
  });

  test.afterAll(async () => {
    if (app) await app.close();
  });

  test('‚úÖ Valida diret√≥rios existentes e interface', async () => {
    console.log('üìÇ Navegando para Selecionar Diret√≥rios...');
    
    // Clica no menu "Selecionar Diret√≥rios" - usa first() para evitar ambiguidade
    const menuDiretorios = page.locator('button', { hasText: 'Selecionar Diret√≥rios' }).first();
    await expect(menuDiretorios).toBeVisible();
    await menuDiretorios.click();
    
    console.log('‚úÖ Menu Selecionar Diret√≥rios acessado');
    await page.waitForTimeout(3000);
    
    // Verifica se chegou na p√°gina correta
    const tituloSecao = page.getByText('Selecionar diret√≥rios para envio de notas');
    await expect(tituloSecao).toBeVisible({ timeout: 10000 });
    
    console.log('üìã Interface de diret√≥rios carregada');
    
    // Valida os diret√≥rios esperados
    const diretoriosEsperados = [
      { nome: 'notas', caminho: 'C:/Users/New User/Downloads/notas', data: '10/09/2025' },
      { nome: 'Certificados (2)', caminho: 'C:/Users/New User/Downloads/Certificados (2)', data: '01/09/2025' },
      { nome: 'certificadoV3', caminho: 'C:/Users/New User/Downloads/certificadoV3', data: '04/09/2025' }
    ];
    
    let diretoriosEncontrados = 0;
    
    for (const dir of diretoriosEsperados) {
      // Verifica se o caminho existe na interface
      const elementoCaminho = page.getByText(dir.caminho, { exact: false });
      const elementoData = page.getByText(dir.data, { exact: false });
      
      const caminhoVisivel = await elementoCaminho.isVisible();
      const dataVisivel = await elementoData.isVisible();
      
      if (caminhoVisivel && dataVisivel) {
        diretoriosEncontrados++;
        console.log(`‚úÖ Diret√≥rio validado: ${dir.nome} (${dir.data})`);
      } else if (caminhoVisivel) {
        diretoriosEncontrados++;
        console.log(`‚úÖ Diret√≥rio encontrado: ${dir.nome} (data n√£o confirmada)`);
      } else {
        console.log(`‚ùå Diret√≥rio n√£o encontrado: ${dir.nome}`);
      }
    }
    
    console.log(`üìä Diret√≥rios validados: ${diretoriosEncontrados}/${diretoriosEsperados.length}`);
    expect(diretoriosEncontrados).toBeGreaterThanOrEqual(2);
  });

  test('ÔøΩ Verifica bot√µes de a√ß√£o dispon√≠veis', async () => {
    console.log('ÔøΩ Analisando bot√µes de a√ß√£o...');
    
    // Acessa o menu primeiro
    const menuDiretorios = page.locator('button', { hasText: 'Selecionar Diret√≥rios' }).first();
    await menuDiretorios.click();
    await page.waitForTimeout(3000);
    
    // Verifica bot√£o de selecionar para notas
    const btnNotas = page.getByText('Selecionar diret√≥rios para envio de notas');
    const notasVisivel = await btnNotas.isVisible();
    console.log(`üìÅ Bot√£o "Selecionar para notas": ${notasVisivel ? '‚úÖ Encontrado' : '‚ùå N√£o encontrado'}`);
    
    // Verifica bot√£o de selecionar para documentos
    const btnDocumentos = page.getByText('Selecionar diret√≥rios para envio de documentos de cadastro');
    const documentosVisivel = await btnDocumentos.isVisible();
    console.log(`ÔøΩ Bot√£o "Selecionar para documentos": ${documentosVisivel ? '‚úÖ Encontrado' : '‚ùå N√£o encontrado'}`);
    
    // Procura por bot√µes de exclus√£o na tabela
    const botoesTabela = page.locator('table button, tbody button, tr button');
    const countBotoes = await botoesTabela.count();
    console.log(`üóëÔ∏è Bot√µes na tabela: ${countBotoes}`);
    
    // Lista classes dos bot√µes para identificar tipos
    for (let i = 0; i < Math.min(countBotoes, 5); i++) {
      const botao = botoesTabela.nth(i);
      const classes = await botao.getAttribute('class');
      const ariaLabel = await botao.getAttribute('aria-label');
      const title = await botao.getAttribute('title');
      
      console.log(`   Bot√£o ${i + 1}: classes="${classes?.substring(0, 50)}..." title="${title}" aria="${ariaLabel}"`);
    }
    
    expect(notasVisivel || documentosVisivel).toBe(true);
  });

  test('üìä Analisa conte√∫do das tabelas', async () => {
    console.log('üìä Analisando tabelas de diret√≥rios...');
    
    // Acessa o menu
    const menuDiretorios = page.locator('button', { hasText: 'Selecionar Diret√≥rios' }).first();
    await menuDiretorios.click();
    await page.waitForTimeout(3000);
    
    // Analisa primeira tabela (envio de notas)
    const tabelaNotas = page.locator('table').first();
    const linhasNotas = tabelaNotas.locator('tr');
    const countNotas = await linhasNotas.count();
    
    console.log(`üìã Tabela de notas: ${countNotas} linhas`);
    
    // Analisa segunda tabela (documentos de cadastro)
    const tabelaDocumentos = page.locator('table').nth(1);
    if (await tabelaDocumentos.isVisible()) {
      const linhasDocumentos = tabelaDocumentos.locator('tr');
      const countDocumentos = await linhasDocumentos.count();
      
      console.log(`ÔøΩ Tabela de documentos: ${countDocumentos} linhas`);
      
      // Lista o conte√∫do das linhas da tabela de documentos
      for (let i = 1; i < Math.min(countDocumentos, 4); i++) { // Pula header
        const linha = linhasDocumentos.nth(i);
        const texto = await linha.textContent();
        console.log(`   Linha ${i}: "${texto?.trim()}"`);
      }
    }
    
    expect(countNotas).toBeGreaterThan(0);
  });

  test('ÔøΩ Valida estrutura espec√≠fica esperada', async () => {
    console.log('ÔøΩ Validando estrutura espec√≠fica...');
    
    // Acessa o menu
    const menuDiretorios = page.locator('button', { hasText: 'Selecionar Diret√≥rios' }).first();
    await menuDiretorios.click();
    await page.waitForTimeout(3000);
    
    // Valida elementos espec√≠ficos da interface
    const elementos = [
      'Lista dos diret√≥rios para envio de notas',
      'Lista dos diret√≥rios para envio de documentos de cadastro'
    ];
    
    let elementosEncontrados = 0;
    
    for (const elemento of elementos) {
      const found = page.getByText(elemento, { exact: false });
      if (await found.isVisible()) {
        elementosEncontrados++;
        console.log(`‚úÖ Encontrado: "${elemento}"`);
      } else {
        console.log(`‚ùå N√£o encontrado: "${elemento}"`);
      }
    }
    
    // Verifica colunas da tabela (usando first() para evitar ambiguidade)
    const colunaDiretorio = page.getByText('Diret√≥rio', { exact: true }).first();
    const colunaModificacao = page.getByText('Modifica√ß√£o', { exact: true }).first();
    const colunaAcoes = page.getByText('A√ß√µes', { exact: true }).first();
    
    if (await colunaDiretorio.isVisible()) {
      elementosEncontrados++;
      console.log(`‚úÖ Encontrado: "Diret√≥rio" (coluna)`);
    }
    if (await colunaModificacao.isVisible()) {
      elementosEncontrados++;
      console.log(`‚úÖ Encontrado: "Modifica√ß√£o" (coluna)`);
    }
    if (await colunaAcoes.isVisible()) {
      elementosEncontrados++;
      console.log(`‚úÖ Encontrado: "A√ß√µes" (coluna)`);
    }
    
    console.log(`üìä Elementos da interface: ${elementosEncontrados}/${elementos.length}`);
    
    // Verifica dados espec√≠ficos esperados
    const dadosEsperados = [
      '10/09/2025',
      '01/09/2025', 
      '04/09/2025'
    ];
    
    let datasEncontradas = 0;
    
    for (const data of dadosEsperados) {
      const elementoData = page.getByText(data);
      if (await elementoData.isVisible()) {
        datasEncontradas++;
        console.log(`ÔøΩ Data encontrada: ${data}`);
      }
    }
    
    console.log(`üìä Datas validadas: ${datasEncontradas}/${dadosEsperados.length}`);
    
    expect(elementosEncontrados).toBeGreaterThanOrEqual(3);
    expect(datasEncontradas).toBeGreaterThanOrEqual(2);
  });
});